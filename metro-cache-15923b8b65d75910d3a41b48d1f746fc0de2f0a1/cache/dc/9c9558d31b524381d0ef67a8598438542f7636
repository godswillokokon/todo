__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  exports.createOrReusePropsNode = createOrReusePropsNode;

  var _reactNative = _require(_dependencyMap[0], "react-native");

  var _AnimatedNode2 = _require(_dependencyMap[1], "./AnimatedNode");

  var _AnimatedNode3 = _interopRequireDefault(_AnimatedNode2);

  var _AnimatedEvent = _require(_dependencyMap[2], "./AnimatedEvent");

  var _AnimatedEvent2 = _interopRequireDefault(_AnimatedEvent);

  var _AnimatedStyle = _require(_dependencyMap[3], "./AnimatedStyle");

  var _AnimatedStyle2 = _interopRequireDefault(_AnimatedStyle);

  var _invariant = _require(_dependencyMap[4], "fbjs/lib/invariant");

  var _invariant2 = _interopRequireDefault(_invariant);

  var _areEqual = _require(_dependencyMap[5], "fbjs/lib/areEqual");

  var _areEqual2 = _interopRequireDefault(_areEqual);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  function sanitizeProps(inputProps) {
    var props = {};

    for (var key in inputProps) {
      var value = inputProps[key];

      if (value instanceof _AnimatedNode3.default && !(value instanceof _AnimatedEvent2.default)) {
        props[key] = value.__nodeID;
      }
    }

    return props;
  }

  function createOrReusePropsNode(props, callback, oldNode) {
    if (props.style) {
      props = _extends({}, props, {
        style: (0, _AnimatedStyle.createOrReuseStyleNode)(props.style, oldNode && oldNode._props.style)
      });
    }

    var config = sanitizeProps(props);

    if (oldNode && (0, _areEqual2.default)(config, oldNode._config)) {
      return oldNode;
    }

    return new AnimatedProps(props, config, callback);
  }

  var AnimatedProps = function (_AnimatedNode) {
    _inherits(AnimatedProps, _AnimatedNode);

    function AnimatedProps(props, config, callback) {
      _classCallCheck(this, AnimatedProps);

      var _this = _possibleConstructorReturn(this, (AnimatedProps.__proto__ || Object.getPrototypeOf(AnimatedProps)).call(this, {
        type: 'props',
        props: config
      }, Object.values(props).filter(function (n) {
        return !(n instanceof _AnimatedEvent2.default);
      })));

      _this._config = config;
      _this._props = props;
      _this._callback = callback;

      _this.__attach();

      return _this;
    }

    _createClass(AnimatedProps, [{
      key: "__onEvaluate",
      value: function __onEvaluate() {
        var props = {};

        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof _AnimatedNode3.default) {
            props[key] = value.__getValue();
          }
        }

        return props;
      }
    }, {
      key: "__detach",
      value: function __detach() {
        var nativeViewTag = (0, _reactNative.findNodeHandle)(this._animatedView);
        (0, _invariant2.default)(nativeViewTag != null, 'Unable to locate attached view in the native tree');

        this._disconnectAnimatedView(nativeViewTag);

        _get(AnimatedProps.prototype.__proto__ || Object.getPrototypeOf(AnimatedProps.prototype), "__detach", this).call(this);
      }
    }, {
      key: "update",
      value: function update() {
        this._callback();
      }
    }, {
      key: "setNativeView",
      value: function setNativeView(animatedView) {
        if (this._animatedView === animatedView) {
          return;
        }

        this._animatedView = animatedView;
        var nativeViewTag = (0, _reactNative.findNodeHandle)(this._animatedView);
        (0, _invariant2.default)(nativeViewTag != null, 'Unable to locate attached view in the native tree');

        this._connectAnimatedView(nativeViewTag);
      }
    }]);

    return AnimatedProps;
  }(_AnimatedNode3.default);
});