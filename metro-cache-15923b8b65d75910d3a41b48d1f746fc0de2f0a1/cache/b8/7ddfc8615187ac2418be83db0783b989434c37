__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.requireNativeViewManager = undefined;

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/home/og/Documents/react-native/todo/node_modules/expo-react-native-adapter/src/NativeViewManagerAdapter.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _lodash = _require(_dependencyMap[2], "lodash.omit");

  var _lodash2 = _interopRequireDefault(_lodash);

  var _lodash3 = _require(_dependencyMap[3], "lodash.pick");

  var _lodash4 = _interopRequireDefault(_lodash3);

  var _propTypes = _require(_dependencyMap[4], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[5], "react-native");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    NativeComponent: {
      displayName: "NativeComponent",
      isInFunction: true
    },
    NativeComponentWrapper: {
      displayName: "NativeComponentWrapper",
      isInFunction: true
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/home/og/Documents/react-native/todo/node_modules/expo-react-native-adapter/src/NativeViewManagerAdapter.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var ViewPropTypesKeys = Object.keys(_reactNative.ViewPropTypes);

  var getViewManagerAdapterNameForViewName = function getViewManagerAdapterNameForViewName(name) {
    return "ViewManagerAdapter_" + name;
  };

  var createNativeComponentClass = function createNativeComponentClass(name) {
    var _class, _temp;

    var NativeComponent = _wrapComponent("NativeComponent")((_temp = _class = function (_React$Component) {
      _inherits(NativeComponent, _React$Component);

      function NativeComponent() {
        _classCallCheck(this, NativeComponent);

        return _possibleConstructorReturn(this, (NativeComponent.__proto__ || Object.getPrototypeOf(NativeComponent)).apply(this, arguments));
      }

      _createClass(NativeComponent, [{
        key: "render",
        value: function render() {
          return _react3.default.createElement(UnderlyingNativeComponent, _extends({}, this.props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 27
            }
          }));
        }
      }]);

      return NativeComponent;
    }(_react3.default.Component), _class.propTypes = _extends({}, _reactNative.ViewPropTypes, {
      proxiedProperties: _propTypes2.default.object
    }), _temp));

    var nativeComponentName = getViewManagerAdapterNameForViewName(name);
    var UnderlyingNativeComponent = (0, _reactNative.requireNativeComponent)(nativeComponentName, NativeComponent, {
      nativeOnly: Object.keys(_reactNative.UIManager[nativeComponentName].NativeProps).reduce(function (acc, key) {
        return _extends({}, acc, _defineProperty({}, key, true));
      }, {})
    });
    NativeComponent.displayName = name;
    return NativeComponent;
  };

  var requireNativeViewManager = exports.requireNativeViewManager = function requireNativeViewManager(name, component) {
    if (!_reactNative.NativeModules.ExpoNativeModuleProxy.viewManagersNames.includes(name)) {
      console.warn("It seems the native view manager which you're trying to require by name" + "from NativeViewManagerAdapter isn't exported by expo-react-native-adapter." + ' Things may not work properly. Exported view managers: [' + _reactNative.NativeModules.ExpoNativeModuleProxy.viewManagersNames.join(', ') + ("], and you required \"" + name + "\"."));
    }

    var NativeComponent = createNativeComponentClass(name);
    var PropTypesKeys = ['children'].concat(_toConsumableArray(ViewPropTypesKeys), _toConsumableArray(Object.keys(_reactNative.UIManager[getViewManagerAdapterNameForViewName(name)].NativeProps)), _toConsumableArray(Object.keys(_reactNative.UIManager[getViewManagerAdapterNameForViewName(name)].directEventTypes)));

    var NativeComponentWrapper = _wrapComponent("NativeComponentWrapper")(function (_React$Component2) {
      _inherits(NativeComponentWrapper, _React$Component2);

      function NativeComponentWrapper() {
        _classCallCheck(this, NativeComponentWrapper);

        return _possibleConstructorReturn(this, (NativeComponentWrapper.__proto__ || Object.getPrototypeOf(NativeComponentWrapper)).apply(this, arguments));
      }

      _createClass(NativeComponentWrapper, [{
        key: "render",
        value: function render() {
          var nativeProps = (0, _lodash4.default)(this.props, PropTypesKeys);
          var proxiedProps = (0, _lodash2.default)(this.props, PropTypesKeys);
          return _react3.default.createElement(NativeComponent, _extends({
            proxiedProperties: proxiedProps
          }, nativeProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 66
            }
          }));
        }
      }]);

      return NativeComponentWrapper;
    }(_react3.default.Component));

    NativeComponentWrapper.displayName = "ViewWrapper<" + name + ">";
    return NativeComponentWrapper;
  };
});