__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _ReanimatedModule = _require(_dependencyMap[0], "../ReanimatedModule");

  var _ReanimatedModule2 = _interopRequireDefault(_ReanimatedModule);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var UPDATED_NODES = [];
  var INITIALIZED_NODES = new Set();
  var loopID = 1;
  var propUpdatesEnqueued = null;

  function sanitizeConfig(config) {
    for (var key in config) {
      var value = config[key];

      if (value instanceof AnimatedNode) {
        config[key] = value.__nodeID;
      }
    }

    return config;
  }

  function runPropUpdates() {
    var visitedNodes = new Set();

    var findAndUpdateNodes = function findAndUpdateNodes(node) {
      if (visitedNodes.has(node)) {
        return;
      } else {
        visitedNodes.add(node);
      }

      if (typeof node.update === 'function') {
        node.update();
      } else {
        node.__getChildren().forEach(findAndUpdateNodes);
      }
    };

    for (var i = 0; i < UPDATED_NODES.length; i++) {
      var node = UPDATED_NODES[i];
      findAndUpdateNodes(node);
    }

    UPDATED_NODES.length = 0;
    propUpdatesEnqueued = null;
    loopID += 1;
  }

  var nodeCount = 0;

  var AnimatedNode = function () {
    function AnimatedNode(nodeConfig, inputNodes) {
      _classCallCheck(this, AnimatedNode);

      this.__lastLoopID = 0;
      this.__memoizedValue = null;
      this.__children = [];
      this.__nodeID = ++nodeCount;
      this.__nodeConfig = sanitizeConfig(nodeConfig);
      this.__inputNodes = inputNodes && inputNodes.filter(function (node) {
        return node instanceof AnimatedNode;
      });
    }

    _createClass(AnimatedNode, [{
      key: "__attach",
      value: function __attach() {
        var _this = this;

        this.__nativeInitialize();

        this.__inputNodes && this.__inputNodes.forEach(function (node) {
          return node.__addChild(_this);
        });
      }
    }, {
      key: "__detach",
      value: function __detach() {
        var _this2 = this;

        this.__inputNodes && this.__inputNodes.forEach(function (node) {
          return node.__removeChild(_this2);
        });

        this.__nativeTearDown();
      }
    }, {
      key: "__getValue",
      value: function __getValue() {
        if (this.__lastLoopID < loopID) {
          this.__lastLoopID = loopID;
          return this.__memoizedValue = this.__onEvaluate();
        }

        return this.__memoizedValue;
      }
    }, {
      key: "__forceUpdateCache",
      value: function __forceUpdateCache(newValue) {
        this.__memoizedValue = newValue;

        this.__markUpdated();
      }
    }, {
      key: "__dangerouslyRescheduleEvaluate",
      value: function __dangerouslyRescheduleEvaluate() {
        this.__lastLoopID = 0;

        this.__markUpdated();
      }
    }, {
      key: "__markUpdated",
      value: function __markUpdated() {
        UPDATED_NODES.push(this);

        if (!propUpdatesEnqueued) {
          propUpdatesEnqueued = setImmediate(runPropUpdates);
        }
      }
    }, {
      key: "__nativeInitialize",
      value: function __nativeInitialize() {
        if (!INITIALIZED_NODES.has(this.__nodeID)) {
          _ReanimatedModule2.default.createNode(this.__nodeID, this.__nodeConfig);

          INITIALIZED_NODES.add(this.__nodeID);
        }
      }
    }, {
      key: "__nativeTearDown",
      value: function __nativeTearDown() {
        if (INITIALIZED_NODES.has(this.__nodeID)) {
          _ReanimatedModule2.default.dropNode(this.__nodeID);

          INITIALIZED_NODES.delete(this.__nodeID);
        }
      }
    }, {
      key: "isNativelyInitialized",
      value: function isNativelyInitialized() {
        return INITIALIZED_NODES.has(this.__nodeID);
      }
    }, {
      key: "__onEvaluate",
      value: function __onEvaluate() {
        throw new Error('Missing implementation of onEvaluate');
      }
    }, {
      key: "__getProps",
      value: function __getProps() {
        return this.__getValue();
      }
    }, {
      key: "__getChildren",
      value: function __getChildren() {
        return this.__children;
      }
    }, {
      key: "__addChild",
      value: function __addChild(child) {
        if (this.__children.length === 0) {
          this.__attach();
        }

        this.__children.push(child);

        child.__nativeInitialize();

        _ReanimatedModule2.default.connectNodes(this.__nodeID, child.__nodeID);
      }
    }, {
      key: "__removeChild",
      value: function __removeChild(child) {
        var index = this.__children.indexOf(child);

        if (index === -1) {
          console.warn("Trying to remove a child that doesn't exist");
          return;
        }

        _ReanimatedModule2.default.disconnectNodes(this.__nodeID, child.__nodeID);

        this.__children.splice(index, 1);

        if (this.__children.length === 0) {
          this.__detach();
        }
      }
    }, {
      key: "_connectAnimatedView",
      value: function _connectAnimatedView(nativeViewTag) {
        _ReanimatedModule2.default.connectNodeToView(this.__nodeID, nativeViewTag);
      }
    }, {
      key: "_disconnectAnimatedView",
      value: function _disconnectAnimatedView(nativeViewTag) {
        _ReanimatedModule2.default.disconnectNodeFromView(this.__nodeID, nativeViewTag);
      }
    }]);

    return AnimatedNode;
  }();

  exports.default = AnimatedNode;
});