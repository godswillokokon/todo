__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _expoCore = _require(_dependencyMap[0], "expo-core");

  var _reactNative = _require(_dependencyMap[1], "react-native");

  var AdMobInterstitialManager = _expoCore.NativeModulesProxy.ExpoAdsAdMobInterstitialManager;
  var adMobInterstitialEmitter = new _expoCore.EventEmitter(AdMobInterstitialManager);
  var eventNames = ['interstitialDidLoad', 'interstitialDidFailToLoad', 'interstitialDidOpen', 'interstitialDidClose', 'interstitialWillLeaveApplication'];
  var eventHandlers = {};
  eventNames.forEach(function (eventName) {
    eventHandlers[eventName] = new Map();
  });

  var addEventListener = function addEventListener(type, handler) {
    if (eventNames.includes(type)) {
      eventHandlers[type].set(handler, adMobInterstitialEmitter.addListener(type, handler));
    } else {
      console.log("Event with type " + type + " does not exist.");
    }
  };

  var removeEventListener = function removeEventListener(type, handler) {
    var eventSubscription = eventHandlers[type].get(handler);

    if (!eventHandlers[type].has(handler) || !eventSubscription) {
      return;
    }

    eventSubscription.remove();
    eventHandlers[type].delete(handler);
  };

  var removeAllListeners = function removeAllListeners() {
    return eventNames.forEach(function (eventName) {
      return adMobInterstitialEmitter.removeAllListeners(eventName);
    });
  };

  module.exports = {
    setAdUnitID: function setAdUnitID(id) {
      return AdMobInterstitialManager.setAdUnitID(id);
    },
    setTestDeviceID: function setTestDeviceID(id) {
      return AdMobInterstitialManager.setTestDeviceID(id);
    },
    requestAdAsync: function requestAdAsync() {
      return AdMobInterstitialManager.requestAd();
    },
    showAdAsync: function showAdAsync() {
      return AdMobInterstitialManager.showAd();
    },
    dismissAdAsync: function dismissAdAsync() {
      return new Promise(function (resolve, reject) {
        if (_reactNative.Platform.OS === 'ios') {
          AdMobInterstitialManager.dismissAd().then(resolve).catch(reject);
        } else {
          reject(new Error('Dismissing ads programmatically is supported only on iOS.'));
        }
      });
    },
    getIsReadyAsync: function getIsReadyAsync() {
      return AdMobInterstitialManager.getIsReady();
    },
    addEventListener: addEventListener,
    removeEventListener: removeEventListener,
    removeAllListeners: removeAllListeners
  };
});