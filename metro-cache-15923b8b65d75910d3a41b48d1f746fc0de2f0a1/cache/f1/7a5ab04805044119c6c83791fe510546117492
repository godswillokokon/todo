__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/home/og/Documents/react-native/todo/node_modules/react-native/Libraries/Components/TextInput/InputAccessoryView.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    InputAccessoryView: {
      displayName: "InputAccessoryView"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/home/og/Documents/react-native/todo/node_modules/react-native/Libraries/Components/TextInput/InputAccessoryView.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var ColorPropType = _require(_dependencyMap[2], '../../StyleSheet/ColorPropType');

  var React = _require(_dependencyMap[0], "react");

  var StyleSheet = _require(_dependencyMap[3], '../../StyleSheet/StyleSheet');

  var ViewPropTypes = _require(_dependencyMap[4], '../View/ViewPropTypes');

  var requireNativeComponent = _require(_dependencyMap[5], '../../ReactNative/requireNativeComponent');

  var RCTInputAccessoryView = requireNativeComponent('RCTInputAccessoryView');

  var InputAccessoryView = _wrapComponent("InputAccessoryView")(function (_React$Component) {
    _inherits(InputAccessoryView, _React$Component);

    function InputAccessoryView() {
      _classCallCheck(this, InputAccessoryView);

      return _possibleConstructorReturn(this, (InputAccessoryView.__proto__ || Object.getPrototypeOf(InputAccessoryView)).apply(this, arguments));
    }

    _createClass(InputAccessoryView, [{
      key: "render",
      value: function render() {
        if (React.Children.count(this.props.children) === 0) {
          return null;
        }

        return React.createElement(
          RCTInputAccessoryView,
          {
            style: [this.props.style, styles.container],
            nativeID: this.props.nativeID,
            backgroundColor: this.props.backgroundColor,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 98
            }
          },
          this.props.children
        );
      }
    }]);

    return InputAccessoryView;
  }(React.Component));

  var styles = StyleSheet.create({
    container: {
      position: 'absolute'
    }
  });
  module.exports = InputAccessoryView;
});