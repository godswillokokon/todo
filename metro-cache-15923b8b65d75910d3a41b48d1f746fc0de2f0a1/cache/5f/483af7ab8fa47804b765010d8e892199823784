__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.AdIconViewContext = exports.MediaViewContext = exports.TriggerableContext = undefined;

  var _react2 = _require(_dependencyMap[0], "react");

  var React = _interopRequireWildcard(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/home/og/Documents/react-native/todo/node_modules/expo/src/facebook-ads/withNativeAd.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _fbemitter = _require(_dependencyMap[2], "fbemitter");

  var _reactNative = _require(_dependencyMap[3], "react-native");

  var _NativeAdsManager = _require(_dependencyMap[4], "./NativeAdsManager");

  var _NativeAdsManager2 = _interopRequireDefault(_NativeAdsManager);

  var _AdIconViewManager = _require(_dependencyMap[5], "./AdIconViewManager");

  var _MediaViewManager = _require(_dependencyMap[6], "./MediaViewManager");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    NativeAdWrapper: {
      displayName: "NativeAdWrapper",
      isInFunction: true
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/home/og/Documents/react-native/todo/node_modules/expo/src/facebook-ads/withNativeAd.js",
    components: _components,
    locals: [module],
    imports: [React.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var NativeAdView = (0, _reactNative.requireNativeComponent)('CTKNativeAd', null);
  var defaultValue = {
    register: null,
    unregister: null
  };
  var TriggerableContext = exports.TriggerableContext = React.createContext(defaultValue);
  var MediaViewContext = exports.MediaViewContext = React.createContext(defaultValue);
  var AdIconViewContext = exports.AdIconViewContext = React.createContext(defaultValue);

  exports.default = function (Component) {
    return _wrapComponent("NativeAdWrapper")(function (_React$Component) {
      _inherits(NativeAdWrapper, _React$Component);

      function NativeAdWrapper(props) {
        _classCallCheck(this, NativeAdWrapper);

        var _this = _possibleConstructorReturn(this, (NativeAdWrapper.__proto__ || Object.getPrototypeOf(NativeAdWrapper)).call(this, props));

        _this._registerMediaView = function (mediaView) {
          return _this.setState({
            mediaViewNodeHandle: (0, _reactNative.findNodeHandle)(mediaView)
          });
        };

        _this._unregisterMediaView = function () {
          return _this.setState({
            mediaViewNodeHandle: -1
          });
        };

        _this._registerAdIconView = function (adIconView) {
          return _this.setState({
            adIconViewNodeHandle: (0, _reactNative.findNodeHandle)(adIconView)
          });
        };

        _this._unregisterAdIconView = function () {
          return _this.setState({
            adIconViewNodeHandle: -1
          });
        };

        _this._registerClickableChild = function (child) {
          _this._clickableChildrenNodeHandles.set(child, (0, _reactNative.findNodeHandle)(child));

          _this.setState({
            clickableChildren: _this.state.clickableChildren.add((0, _reactNative.findNodeHandle)(child))
          });
        };

        _this._unregisterClickableChild = function (child) {
          _this.setState(function (_ref) {
            var clickableChildren = _ref.clickableChildren;
            var newClickableChildren = new Set(clickableChildren);

            var nodeHandle = _this._clickableChildrenNodeHandles.get(child);

            if (nodeHandle) {
              newClickableChildren.delete(nodeHandle);

              _this._clickableChildrenNodeHandles.delete(child);

              return {
                clickableChildren: newClickableChildren
              };
            }
          });
        };

        _this._onTriggerEvent = function () {
          if (_this.state.mediaViewNodeHandle !== -1 && _reactNative.Platform.OS === 'android') {
            _NativeAdsManager2.default.triggerEvent((0, _reactNative.findNodeHandle)(_this._nativeAdViewRef));
          }
        };

        _this._handleAdUpdated = function () {
          return _this.props.onAdLoaded && _this.props.onAdLoaded(_this.state.ad);
        };

        _this._handleAdLoaded = function (_ref2) {
          var nativeEvent = _ref2.nativeEvent;

          _this.setState({
            ad: nativeEvent
          }, _this._handleAdUpdated);
        };

        _this._handleNativeAdViewMount = function (ref) {
          _this._nativeAdViewRef = ref;
        };

        _this._registerFunctionsForTriggerables = {
          register: _this._registerClickableChild,
          unregister: _this._unregisterClickableChild,
          onTriggerEvent: _this._onTriggerEvent
        };
        _this._registerFunctionsForMediaView = {
          unregister: _this._unregisterMediaView,
          register: _this._registerMediaView
        };
        _this._registerFunctionsForAdIconView = {
          unregister: _this._unregisterAdIconView,
          register: _this._registerAdIconView
        };
        _this._clickableChildrenNodeHandles = new Map();
        _this.state = {
          ad: null,
          mediaViewNodeHandle: -1,
          adIconViewNodeHandle: -1,
          clickableChildren: new Set(),
          canRequestAds: false
        };
        return _this;
      }

      _createClass(NativeAdWrapper, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this2 = this;

          this._subscription = this.props.adsManager.onAdsLoaded(function () {
            return _this2.setState({
              canRequestAds: true
            });
          });
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps, prevState) {
          var _this3 = this;

          if (this.state.mediaViewNodeHandle !== -1) {
            var mediaViewNodeHandleChanged = this.state.mediaViewNodeHandle !== prevState.mediaViewNodeHandle;
            var adIconViewNodeHandleChanged = this.state.adIconViewNodeHandle !== prevState.adIconViewNodeHandle;
            var clickableChildrenDiff = [].concat(_toConsumableArray(prevState.clickableChildren)).filter(function (child) {
              return !_this3.state.clickableChildren.has(child);
            });
            var clickableChildrenChanged = prevState.clickableChildren.size !== this.state.clickableChildren.size || clickableChildrenDiff.length > 0;

            if (mediaViewNodeHandleChanged || adIconViewNodeHandleChanged || clickableChildrenChanged) {
              _NativeAdsManager2.default.registerViewsForInteractionAsync((0, _reactNative.findNodeHandle)(this._nativeAdViewRef), this.state.mediaViewNodeHandle, this.state.adIconViewNodeHandle, [].concat(_toConsumableArray(this.state.clickableChildren)));
            }
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          if (this._subscription) {
            this._subscription.remove();
          }
        }
      }, {
        key: "renderAdComponent",
        value: function renderAdComponent(componentProps) {
          if (this.state.ad) {
            return React.createElement(
              AdIconViewContext.Provider,
              {
                value: this._registerFunctionsForAdIconView,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 192
                }
              },
              React.createElement(
                MediaViewContext.Provider,
                {
                  value: this._registerFunctionsForMediaView,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 193
                  }
                },
                React.createElement(
                  TriggerableContext.Provider,
                  {
                    value: this._registerFunctionsForTriggerables,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 194
                    }
                  },
                  React.createElement(Component, _extends({}, componentProps, {
                    nativeAd: this.state.ad,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 195
                    }
                  }))
                )
              )
            );
          }

          return null;
        }
      }, {
        key: "render",
        value: function render() {
          var _props = this.props,
              adsManager = _props.adsManager,
              props = _objectWithoutProperties(_props, ["adsManager"]);

          delete props.onAdLoaded;

          if (!this.state.canRequestAds) {
            return null;
          }

          return React.createElement(
            NativeAdView,
            {
              ref: this._handleNativeAdViewMount,
              adsManager: adsManager.toJSON(),
              onAdLoaded: this._handleAdLoaded,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 213
              }
            },
            this.renderAdComponent(props)
          );
        }
      }]);

      return NativeAdWrapper;
    }(React.Component));
  };
});