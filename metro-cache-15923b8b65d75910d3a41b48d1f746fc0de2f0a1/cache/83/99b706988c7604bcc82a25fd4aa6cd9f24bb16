__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.watchStepCount = watchStepCount;
  exports.getStepCountAsync = getStepCountAsync;
  exports.isAvailableAsync = isAvailableAsync;

  var _expoCore = _require(_dependencyMap[0], "expo-core");

  var _invariant = _require(_dependencyMap[1], "invariant");

  var _invariant2 = _interopRequireDefault(_invariant);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var PedometerEventEmitter = new _expoCore.EventEmitter(_expoCore.NativeModulesProxy.ExponentPedometer);

  function watchStepCount(callback) {
    return PedometerEventEmitter.addListener('Exponent.pedometerUpdate', callback);
  }

  function getStepCountAsync(start, end) {
    return regeneratorRuntime.async(function getStepCountAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            (0, _invariant2.default)(start <= end, 'Pedometer: The start date must precede the end date.');
            _context.next = 3;
            return regeneratorRuntime.awrap(_expoCore.NativeModulesProxy.ExponentPedometer.getStepCountAsync(start.getTime(), end.getTime()));

          case 3:
            return _context.abrupt("return", _context.sent);

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, null, this);
  }

  function isAvailableAsync() {
    return regeneratorRuntime.async(function isAvailableAsync$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return regeneratorRuntime.awrap(_expoCore.NativeModulesProxy.ExponentPedometer.isAvailableAsync());

          case 2:
            return _context2.abrupt("return", _context2.sent);

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  }
});