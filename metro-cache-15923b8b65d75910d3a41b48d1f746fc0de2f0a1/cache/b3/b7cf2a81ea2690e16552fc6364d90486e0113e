__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Constants = undefined;

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "/home/og/Documents/react-native/todo/node_modules/expo-barcode-scanner/src/BarCodeScanner.js";

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _lodash = _require(_dependencyMap[3], "lodash.mapvalues");

  var _lodash2 = _interopRequireDefault(_lodash);

  var _expoCore = _require(_dependencyMap[4], "expo-core");

  var _reactNative = _require(_dependencyMap[5], "react-native");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    BarCodeScanner: {
      displayName: "BarCodeScanner"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/home/og/Documents/react-native/todo/node_modules/expo-barcode-scanner/src/BarCodeScanner.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var ExpoBarCodeScannerModule = _expoCore.NativeModulesProxy.ExpoBarCodeScannerModule;
  var EVENT_THROTTLE_MS = 500;

  var BarCodeScanner = _wrapComponent("BarCodeScanner")((_temp = _class = function (_React$Component) {
    _inherits(BarCodeScanner, _React$Component);

    function BarCodeScanner(props) {
      _classCallCheck(this, BarCodeScanner);

      var _this = _possibleConstructorReturn(this, (BarCodeScanner.__proto__ || Object.getPrototypeOf(BarCodeScanner)).call(this, props));

      _this.setReference = function (ref) {
        if (ref) {
          _this.barCodeScannerRef = ref;
          _this.barCodeScannerHandle = (0, _reactNative.findNodeHandle)(ref);
        } else {
          _this.barCodeScannerRef = null;
          _this.barCodeScannerHandle = null;
        }
      };

      _this.onObjectDetected = function (callback) {
        return function (_ref) {
          var nativeEvent = _ref.nativeEvent;
          var type = nativeEvent.type;

          if (_this.lastEvents[type] && _this.lastEventsTimes[type] && JSON.stringify(nativeEvent) === _this.lastEvents[type] && new Date() - _this.lastEventsTimes[type] < EVENT_THROTTLE_MS) {
            return;
          }

          if (callback) {
            callback(nativeEvent);
            _this.lastEventsTimes[type] = new Date();
            _this.lastEvents[type] = JSON.stringify(nativeEvent);
          }
        };
      };

      _this.lastEvents = {};
      _this.lastEventsTimes = {};
      return _this;
    }

    _createClass(BarCodeScanner, [{
      key: "render",
      value: function render() {
        var nativeProps = this.convertNativeProps(this.props);
        var _props = this.props,
            onBarCodeScanned = _props.onBarCodeScanned,
            onBarCodeRead = _props.onBarCodeRead;
        return _react3.default.createElement(ExpoBarCodeScannerView, _extends({}, nativeProps, {
          ref: this.setReference,
          onBarCodeScanned: this.onObjectDetected(onBarCodeScanned || onBarCodeRead),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 78
          }
        }));
      }
    }, {
      key: "convertNativeProps",
      value: function convertNativeProps(props) {
        var newProps = (0, _lodash2.default)(props, this.convertProp);
        return newProps;
      }
    }, {
      key: "convertProp",
      value: function convertProp(value, key) {
        if (typeof value === 'string' && BarCodeScanner.ConversionTables[key]) {
          return BarCodeScanner.ConversionTables[key][value];
        }

        return value;
      }
    }], [{
      key: "scanFromURLAsync",
      value: function scanFromURLAsync(url, barCodeTypes) {
        var effectiveBarCodeTypes;
        return regeneratorRuntime.async(function scanFromURLAsync$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(Array.isArray(barCodeTypes) && barCodeTypes.length === 0)) {
                  _context.next = 2;
                  break;
                }

                throw new Error('No barCodeTypes requested, provide at least one barCodeType for scanner');

              case 2:
                if (!(_reactNative.Platform.OS === 'ios')) {
                  _context.next = 6;
                  break;
                }

                if (!(Array.isArray(barCodeTypes) && !barCodeTypes.includes(BarCodeScanner.Constants.BarCodeType.qr))) {
                  _context.next = 5;
                  break;
                }

                throw new Error('Only QR type is supported by scanFromURLAsync() on iOS');

              case 5:
                return _context.abrupt("return", ExpoBarCodeScannerModule.scanFromURLAsync(url, [BarCodeScanner.Constants.BarCodeType.qr]));

              case 6:
                effectiveBarCodeTypes = barCodeTypes || Object.values(ExpoBarCodeScannerModule.BarCodeType);
                return _context.abrupt("return", ExpoBarCodeScannerModule.scanFromURLAsync(url, effectiveBarCodeTypes));

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }]);

    return BarCodeScanner;
  }(_react3.default.Component), _class.Constants = {
    BarCodeType: ExpoBarCodeScannerModule.BarCodeType,
    Type: ExpoBarCodeScannerModule.Type
  }, _class.ConversionTables = {
    type: ExpoBarCodeScannerModule.Type
  }, _class.propTypes = _extends({}, _reactNative.ViewPropTypes, {
    onBarCodeScanned: _propTypes2.default.func,
    barCodeTypes: _propTypes2.default.array,
    type: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])
  }), _class.defaultProps = {
    type: ExpoBarCodeScannerModule.Type.back,
    barCodeTypes: Object.values(ExpoBarCodeScannerModule.BarCodeType)
  }, _temp));

  exports.default = BarCodeScanner;
  var Constants = exports.Constants = BarCodeScanner.Constants;
  var ExpoBarCodeScannerView = (0, _expoCore.requireNativeViewManager)('ExpoBarCodeScannerView', BarCodeScanner);
});