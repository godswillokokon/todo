__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _utils = _require(_dependencyMap[0], "../utils");

  var _AnimatedNode2 = _require(_dependencyMap[1], "./AnimatedNode");

  var _AnimatedNode3 = _interopRequireDefault(_AnimatedNode2);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var AnimatedCond = function (_AnimatedNode) {
    _inherits(AnimatedCond, _AnimatedNode);

    function AnimatedCond(condition, ifBlock, elseBlock) {
      _classCallCheck(this, AnimatedCond);

      var _this = _possibleConstructorReturn(this, (AnimatedCond.__proto__ || Object.getPrototypeOf(AnimatedCond)).call(this, {
        type: 'cond',
        cond: condition.__nodeID,
        ifBlock: ifBlock.__nodeID,
        elseBlock: elseBlock ? elseBlock.__nodeID : undefined
      }, [condition, ifBlock, elseBlock]));

      _this._condition = condition;
      _this._ifBlock = ifBlock;
      _this._elseBlock = elseBlock;
      return _this;
    }

    _createClass(AnimatedCond, [{
      key: "__onEvaluate",
      value: function __onEvaluate() {
        if ((0, _utils.val)(this._condition)) {
          return (0, _utils.val)(this._ifBlock);
        } else {
          return this._elseBlock !== undefined ? (0, _utils.val)(this._elseBlock) : undefined;
        }
      }
    }]);

    return AnimatedCond;
  }(_AnimatedNode3.default);

  exports.default = AnimatedCond;
});